p <- p+power.t.test(n=n,delta=mean(group_1)-mean(group_2))$power
}
p <- p/1000
return(p)
}
roxygenize()
rm(list = c("postHocPower"))
roxygenize()
#' @title BMI585 final project: the Bonferroni-Holm function for multiple comparison adjustment
#' @description This functions accept one numerical array and a numerical value
#' @param p: the numerical array for multiple comparison
#' @param alpha: number of values in the first array
#' @return p: post-hoc power
#' @examples
#' p<- c(0.0025, 0.0050, 0.0075, 0.0100, 0.0125, 0.0150, 0.0175, 0.0200, 0.0225, 0.0250)
#' alpha <- 0.05
#' bhAdjust(p,alpha)
bhAdjust <- function(p,alpha){
new_p<-p.adjust(p, method = "holm", n = length(p))
order_p <-sort(new_p, decreasing = FALSE)
result <- vector(length=length(order_p))
for (ind in 1:length(order_p)){
if (order_p[ind] < alpha){
idx <- which(new_p==order_p[ind])
result[idx] = 1
}
else{
idx <- which(new_p==order_p[ind])
result[idx] = 0
}
}
return(result)
}
roxygenize()
rm(list = c("bhAdjust"))
roxygenize()
#' @title BMI585 final project: the fdr function for multiple comparison adjustment
#' @description This functions accept one numerical array and a numerical value
#' @param p: the numerical array for multiple comparison
#' @param alpha: number of values in the first array
#' @return p: post-hoc power
#' @examples
#' p<- c(0.0025, 0.0050, 0.0075, 0.0100, 0.0125, 0.0150, 0.0175, 0.0200, 0.0225, 0.0250)
#' alpha <- 0.05
#' fdrAdjust(p,alpha)
fdrAdjust <- function(p,alpha){
new_p<-p.adjust(p, method = "fdr", n = length(p))
order_p <-sort(new_p, decreasing = FALSE)
result <- vector(length=length(order_p))
for (ind in 1:length(order_p)){
if (order_p[ind] < alpha){
idx <- which(new_p==order_p[ind])
result[idx] = 1
}
else{
idx <- which(new_p==order_p[ind])
result[idx] = 0
}
}
return(result)
}
rm(list = c("bhAdjust"))
roxygenize()
rm(list = c("fdrAdjust"))
roxygenize()
#' @title BMI585 final project: R^2 measure for the regression model
#' @description This functions accept two numerical arrays
#' @param y: the numerical array for the ground truth
#' @param y_d: the numerical array for the regression
#' @return R_s: the R^2 measure
#' @examples
#' y <- c(1,1,1)
#' y_d <- c(1,1,0.5)
#' R2(y,y_d)
R2 <- function(y,y_d) {
sse <- sum((y_d - y)^2)
RSS <- sum((y_d - mean(y))^2)
TSS <- RSS + sse
R_s <- 1-RSS/TSS
return(R_s)
}
roxygenize()
rm(list = c("R2"))
roxygenize()
rm(list = c("R2"))
roxygenize()
#' @title BMI585 final project: adjusted R^2 measure for the regression model which has penalty on the number of parameters
#' @description This functions accept two numerical arrays
#' @param y: the numerical array for the ground truth
#' @param y_d: the numerical array for the regression
#' @return R_s: the adjusted R^2 measure
#' @examples
#' y <- c(1,1,1)
#' y_d <- c(1,1,0.5)
#' adjusted_R2(y,y_d)
adjusted_R2 <- function(y,y_d,n) {
sse <- sum((y_d - y)^2)
RSS <- sum((y_d - mean(y))^2)
TSS <- RSS + sse
R_s <- 1-(RSS/(length(y_d)-n-1))/(TSS/(length(y_d)-1))
return(R_s)
}
roxygenize()
rm(list = c("adjusted_R2"))
roxygenize()
library(BMI585final)
pred <- c(1,1,1)
true <- c(1,1,0)
f1(pred,true)
f1 <- function(pred,true){
pred<-as.logical(pred)
true<-as.logical(true)
TP <- pred==true & true==1
TN <- pred==true & true==0
FP <- pred!=true & true==1
FN <- pred!=true & true==0
sen <- 2*sum(TP)/(2*sum(TP)+sum(FP)+sum(FN))
return(sen)
}
library(BMI585final)
pred <- c(1,1,1)
true <- c(1,1,0)
f1(pred,true)
library(BMI585final)
library(BMI585final)
require(stats)
x <- matrix(1:10, ncol = 2)
scale(x, scale = FALSE))
scale(x, scale = FALSE)
y<-scale(x, scale = FALSE)
y
y.attr
y.attr(,"scaled:center")
y[1]
y[1,1]
View(y)
View(y)
scale_ob <- scale(x, center = TRUE, scale = TRUE))
scale_ob <- scale(x))
scale_ob <- scale(x)
scale_ob
scale_ob["scaled:center"]
scale_ob[,"scaled:center"]
scale_ob[scaled:center]
scale_ob$`scaled:center`
$`scaled:center`
attr(scale_ob,"scaled:center")
scale_ob
scale_ob-1
xx <- scale_ob * attr(scale_ob, 'scaled:scale') + attr(scale_ob, 'scaled:center')
x
xx
scale_ob * attr(scale_ob, 'scaled:scale')
x <- matrix(1:10, ncol = 2)
scale_ob <- scale(x)
scale_ob * attr(scale_ob, 'scaled:scale')
scale_ob * attr(scale_ob, 'scaled:scale')+attr(scale_ob, 'scaled:center')
scale_ob * attr(scale_ob, 'scaled:scale')+attr(scale_ob, 'scaled:center')[col(scale_ob)]
roxygenize()
library(roxygen2)
roxygenize()
PCA(scale_ob)
install.packages(FactoMineR)
install.packages('FactoMineR')
PCA(scale_ob)
library(FactoMineR)
PCA(scale_ob)
PCA(scale_ob)$eig
install.packages("factoextra")
library(factoextra)
princomp(scale_ob, cor = FALSE, scores = TRUE)
prcomp(scale_ob, cor = FALSE, scores = TRUE)
res.pca<-prcomp(scale_ob, cor = FALSE, scores = TRUE)
predict(res.pca, newdata = scale_ob)
res.pca
data(iris)
iris.valid[,1:4]
iris[,1:4]
iris[1:100,1:4]
x<- iris[1:100,1:4]
scale_ob <- scale(x)
res.pca<-prcomp(scale_ob, cor = FALSE, scores = TRUE)
pred <- predict(pca, newdata=scale_ob)
pred <- predict(res.pca, newdata=scale_ob)
pred
summary(res.pca)
res.pca$scale_ob[,1:2]
res.pca$scale_ob[,1:4]
res.pca$x[,1:4]
res.pca$x[,1:2]
res.pca$x[,1:2]
summary(res.pca)
res.pca<-prcomp(scale_ob, cor = FALSE, scores = TRUE)
View(iris)
View(iris)
res.pca$x[,1:npc]
res.pca$x[,1:2]
iris
res.pca<-prcomp(x, cor = TRUE)
res.pca$x[,1:2]
res.pca<-prcomp(x, rank. = 3)
View(res.pca)
View(res.pca)
res.pca<-prcomp(x, rank. = 3,scale = TRUE,center=TRUE)
res.pca$x
res.pca<-prcomp(x, rank. = 2,scale = TRUE,center=TRUE)
res.pca['center']
res.pca['scale']
res.pca$x * res.pca['scale']+res.pca[col(res.pca$x)]
res.pca['scale'][2]
res.pca['scale'][1]
res.pca['scale'][1][1]
y<-res.pca['scale']
View(y)
View(y)
y<-res.pca$scale
y
data(iris)
x<- iris[1:100,1:4]
res.pca<-prcomp(t, rank. = npc,scale = TRUE,center=TRUE)
res.pca<-prcomp(t, rank. = 2,scale = TRUE,center=TRUE)
t<- iris[1:100,1:4]
res.pca<-prcomp(t, rank. = 2,scale = TRUE,center=TRUE)
t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center
)
t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:2]
pred <- pcApprox(t,2)
#' @title BMI585 final project: pcApprox function dowmscale the data's dimensionlity
#' @description This functions accept a numberical dataframe
#' @param t: a numerical dataframe for dimensionality reduction
#' @return result: a dataframe which is the PCA conversion of the input x with npc dimensions
#' @examples
#' data(iris)
#' t<- iris[1:100,1:4]
#' t <- scale(x)
#' pred <- pcApprox(t,2)
pcApprox <- function(t,npc) {
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc]
return(result)
}
pred <- pcApprox(t,2)
pred
View(t)
View(t)
t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:2]
replicate(2, "pca")
colname(1)
colname<-replicate(npc, "pca")
colname<-replicate(2, "pca")
colname(1)
colname[1]
c(colname[1],'1')
paste(c("hi", 1), collapse = " ")
paste(c("hi",1), collapse = "")
t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:2]
result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:2]
npc<-2
colname <-replicate(npc,'pca')
for (ind = 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
t<- iris[1:100,1:4]
pred <- pcApprox(t,2)
pred
#' @title BMI585 final project: pcApprox function dowmscale the data's dimensionlity
#' @description This functions accept a numberical dataframe
#' @param t: a numerical dataframe for dimensionality reduction
#' @return result: a dataframe which is the PCA conversion of the input x with npc dimensions
#' @examples
#' data(iris)
#' t<- iris[1:100,1:4]
#' t <- scale(x)
#' pred <- pcApprox(t,2)
pcApprox <- function(t,npc) {
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc]
colname <-replicate(npc,'pca')
for (ind = 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(result) <- colname
return(result)
}
colname
result
colnames(result) <- colname
pcApprox <- function(t,npc) {
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc]
colname <-replicate(npc,'pca')
for (ind = 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(result) <- colname
return(result)
}
pcApprox <- function(t,npc){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc]
colname <-replicate(npc,'pca')
for (ind = 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(result) <- colname
return(result)
}
pcApprox <- function(t,npc){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc])
colname <-replicate(npc,'pca')
for (ind = 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(result) <- colname
return(result)
}
#' @title BMI585 final project: pcApprox function dowmscale the data's dimensionlity
#' @description This functions accept a numberical dataframe
#' @param t: a numerical dataframe for dimensionality reduction
#' @return result: a dataframe which is the PCA conversion of the input x with npc dimensions
#' @examples
#' data(iris)
#' t<- iris[1:100,1:4]
#' t <- scale(x)
#' pred <- pcApprox(t,2)
pcApprox <- function(t,npc){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc]
colname <-replicate(npc,'pca')
for (ind in 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(result) <- colname
return(result)
}
t<- iris[1:100,1:4]
pred <- pcApprox(t,2)
pred
result
pcApprox <- function(t,npc){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
the_result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc]
colname <-replicate(npc,'pca')
for (ind in 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(the_result) <- colname
return(the_result)
}
pred <- pcApprox(t,2)
pred
pcApprox(t,2)
pcApprox <- function(t,npc){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
the_result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc]
colname <-replicate(npc,'pca')
for (ind in 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(the_result) <- colname
return(the_result)
}
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
the_result <- t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)[,1:npc]
the_result
t
t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
t(t(res.pca$x %*% t(res.pca$rotation)) * res.pca$scale+res.pca$center)
npc<-2
res.pca<-prcomp(t,.rank=npc,scale = TRUE,center=TRUE)
res.pca$x * res.pca$scale+res.pca$center
res.pca$x
#' @title BMI585 final project: pcApprox function dowmscale the data's dimensionlity
#' @description This functions accept a numberical dataframe
#' @param t: a numerical dataframe for dimensionality reduction
#' @return the_result[,1:npc]: a dataframe which is the PCA conversion of the input x with npc dimensions
#' @examples
#' data(iris)
#' t<- iris[1:100,1:4]
#' pred <- pcApprox(t,2)
pcApprox <- function(t,npc){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
the_result <- res.pca$x * res.pca$scale+res.pca$center
colname <-replicate(npc,'pca')
for (ind in 1:npc){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(the_result) <- colname
return(the_result[,1:npc])
}
t<- iris[1:100,1:4]
pcApprox(t,2)
t.shape
NCOLS(t)
ncols(t)
ncol(t)
#' @title BMI585 final project: pcApprox function dowmscale the data's dimensionlity
#' @description This functions accept a numberical dataframe
#' @param t: a numerical dataframe for dimensionality reduction
#' @return the_result[,1:npc]: a dataframe which is the PCA conversion of the input x with npc dimensions
#' @examples
#' data(iris)
#' t<- iris[1:100,1:4]
#' pred <- pcApprox(t,2)
pcApprox <- function(t,npc){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
the_result <- res.pca$x * res.pca$scale+res.pca$center
colname <-replicate(npc,'pca')
for (ind in 1:ncol(t)){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
colnames(the_result) <- colname
return(the_result[,1:npc])
}
pcApprox(t,2)
roxygenize()
rm(list = c("pcApprox"))
roxygenize()
plot(iris.pca, type="l")
plot(res.pca, type="l")
res.pca
data <- data.frame(x=res.pca, y=colname)
colname
colname <-replicate(4,'pca')
for (ind in 1:4){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
data <- data.frame(x=res.pca, y=colname)
res.pca$sdev
data <- data.frame(x=res.pca$sdev, y=colname)
ggplot(data, aes(x=x, y=y)) +
geom_point() +
geom_segment( aes(x=x, xend=x, y=0, yend=y))
pcLollipop <- function(t){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
colname <-replicate(npc,'pca')
for (ind in 1:ncol(t)){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
data <- data.frame(x=colname, y=res.pca$sdev)
theplot<-ggplot(data, aes(x=x, y=y)) +
geom_point() +
geom_segment( aes(x=x, xend=x, y=0, yend=y))
return(theplot)
}
theplot<-pcApprox(t)
theplot<-pcLollipop(t)
theplot<-pcApprox(t)
theplot
pcLollipop <- function(t){
res.pca<-prcomp(t,scale = TRUE,center=TRUE)
colname <-replicate(npc,'pca')
for (ind in 1:ncol(t)){
colname[ind] <- paste(c("pca",ind), collapse = "")
}
data <- data.frame(x=colname, standev=res.pca$sdev)
theplot<-ggplot(data, aes(x=x, y=standev)) +
geom_point() +
geom_segment( aes(x=x, xend=x, y=0, yend=standev))
return(theplot)
}
theplot<-pcApprox(t)
theplot<-pcLollipop(t)
theplot
roxygenize()
rm(list = c("pcLollipop"))
roxygenize()
install_github("shaoyanpan/BMI500final")
library(devtools)
install_github("shaoyanpan/BMI500final")
install_github("shaoyanpan/BMI585final")
install_github("shaoyanpan/BMI585final")
install_github("shaoyanpan/BMI500final")
library(BMI585final)
pred <- c(1,1,1)
true <- c(1,1,0)
f1(pred,true)
BMI585final$f1
library(BMI585final)
ls("package:BMI585final")
ls("package:delopy")
ls("package:roxygen2: ")
ls("package:roxygen2")
ls("package:roxygen")
help(package = BMI585final)
help(package = dplyr)
ls("package:dplyr")
ls("dplyr")
ls("package:dplyr")lsf.str("package:dplyr")
lsf.str("package:dplyr")
library(dplyr)
lsf.str("package:dplyr")
lsf.str("package:BMI585final")
#' @title BMI585 final project: find the minimum sample size
#' @description This functions accept a numerical value
#' @param power: power for statistics
#' @return result: minimum sample size
#' @examples
#' power <- 1
#' min_sample_size(power)
min_sample_size = function(power){
result <- power.t.test(power = power, delta = 1)
return (result$n[1])
}
roxygenize()
library(roxygen2)
roxygenize()
rm(list = c("min_sample_size"))
roxygenize()
lsf.str("package:BMI585final")
